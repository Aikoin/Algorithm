//并查集的实现

#define MAX_N 100

int par[MAX_N];   //父亲
int Rank[MAX_N];  //树的高度

//初始化n个元素
void init(int n){
    for(int i = 0; i < n; i++){
        par[i] = i;
        Rank[i] = 0;
    }
}

//查询树的根
int find(int x){
    if(par[x] == x) return x;
    else
        return par[x] = find(par[x]);  //路径压缩:查询过程中,向上经过的所有节点，都改为直接连到根上
}

//合并x和y所属的集合:从一个组的根向另一个组的根连边
void unite(int x,int y){
    x = find(x);
    y = find(y);
    if(x == y) return;  //x和y已经是同一组的了，直接返回
    //从高度(Rank)小的向高度大的连边
    if(Rank[x] < Rank[y]) //x的高度小，x向y连边
        par[x] = y;
    else{    //否则，y向x连边
        par[y] = x;
        if(Rank[x] == Rank[y]) Rank[x]++;  //如果两个高度一样，合并后树高度+1
    }
}

//判断x和y是否属于同一个集合
bool same(int x,int y){
    return find(x) ==  find(y);
}